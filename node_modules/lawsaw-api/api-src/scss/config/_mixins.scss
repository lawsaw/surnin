@mixin clearfix {
  clear: both;
  &:after {
    content: "";
    display: table;
    clear: both;
  }
}



@mixin ellipsis {
  white-space:nowrap;
  text-overflow:ellipsis;
  overflow:hidden;
}



@mixin animation($name,$duration,$iteration,$function,$delay,$direction,$state,$mode) {
  animation-name: $name;
  animation-duration: $duration;
  animation-iteration-count: $iteration;
  animation-timing-function: $function;
  animation-delay: $delay;
  animation-direction: $direction;
  animation-play-state: $direction;
  animation-fill-mode: $mode;
}



@mixin alignAbsolute() {
  position:absolute;left:0;right:0;top:0;bottom:0;margin:auto;
}



@mixin filter($filter-type,$filter-amount) {
  -webkit-filter: $filter-type+unquote('(#{$filter-amount})');
  -moz-filter: $filter-type+unquote('(#{$filter-amount})');
  -ms-filter: $filter-type+unquote('(#{$filter-amount})');
  -o-filter: $filter-type+unquote('(#{$filter-amount})');
  filter: $filter-type+unquote('(#{$filter-amount})');
}


@mixin font-face($name, $file, $path, $category:"") {
  $filepath: $path + "/" + $file;
  @font-face {
    font-family: '#{$name}';
    src: url($filepath + '.eot');
    src: url($filepath + '.eot?#iefix') format('embedded-opentype'),
    url($filepath + '.woff2') format('woff2'),
    url($filepath + '.woff') format('woff'),
    url($filepath + '.ttf') format('truetype'),
    url($filepath + '.svg##{$name}') format('svg');
    font-weight: normal;
    font-style: normal;
  }
}


@mixin fillFixed() {
  position: fixed;
  width: 100%;
  height: 100%;
  top: 0;
  left: 0;
}



@mixin rem-fallback($property, $values...) {
  $max: length($values);
  $pxValues: '';
  $remValues: '';

  @for $i from 1 through $max {
    $value: strip-unit(nth($values, $i));
    $pxValues: #{$pxValues + $value*16}px;

    @if $i < $max {
      $pxValues: #{$pxValues + " "};
    }
  }

  @for $i from 1 through $max {
    $value: strip-unit(nth($values, $i));
    $remValues: #{$remValues + $value}rem;

    @if $i < $max {
      $remValues: #{$remValues + " "};
    }
  }

  #{$property}: $pxValues;
  #{$property}: $remValues;
}



//@mixin font-sizze($sizeValue: 1.6, $line: $sizeValue * map-get($default, 'base-line-height')){
//  font-size: ($sizeValue * 1) + px;
//  line-height: ($line * 1) + px;
//  font-size: ($sizeValue / 10) + rem;
//  line-height: ($line / 10) + rem;
//}


//@mixin font-size($sizeValue: 1.6, $line: $sizeValue * map-get($default, 'base-line-height'), $deg: rem){
//  font-size: ($sizeValue * 10) + px;
//  line-height: ($line * 10) + px;
//  font-size: ($sizeValue / 1) + $deg;
//  line-height: ($line / 1) + em;
//}


@mixin font-size($sizeValue: 1.6, $line: $sizeValue * map-get($default, 'base-line-height') - $sizeValue/2, $deg: rem){
  font-size: ($sizeValue / 1) + $deg;
}
