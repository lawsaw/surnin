function getScrollTop(){
    return $(document).scrollTop();
}



function getViewportSize() {
    var e = window, a = 'inner';
    if (!('innerWidth' in window )) {
        a = 'client';
        e = document.documentElement || document.body;
    }
    return { width : e[ a+'Width' ] , height : e[ a+'Height' ] };
}



function detectDevice() {
    var detectObj = detect.parse(navigator.userAgent);
    var browser = 'browser-' + detectObj.browser.family;
    var browserVer = 'browserVer-' + detectObj.browser.version;
    var device = 'device-' + detectObj.device.family;
    var deviceVer = 'deviceVer-' + detectObj.device.version;
    var os = 'os-' + detectObj.os.family;
    var osVer = 'osVer-' + detectObj.os.version;
    $('html').addClass(browser + ' ' + browserVer + ' ' + device + ' ' + deviceVer + ' ' + os + ' ' + osVer);
}


function transform() {
    /*$(this).css({
        transform: "rotate(0deg)",
        "-moz-transform": "rotate(0deg)",
        "-webkit-transform": "rotate(0deg)"
    });*/
}



function isWindowWidth(min, max) {
    var windowWidth = getViewportSize().width;
    if (max == null) {
        if (windowWidth >= min) {
            return true;
        } else {
            return false;
        }
    } else {
        if (windowWidth >= min && windowWidth < max) {
            return true;
        } else {
            return false;
        }
    }
}



function imgFill(img) {
    var container = img.parent(),
        containerWidth = container.width(),
        containerHeight = container.height(),
        imgWidth = img.width(),
        imgHeight = img.height();
    if(imgWidth > imgHeight) {
        img.css({
            'width' : 'auto',
            'height' : '100%'
        });
    } else {
        img.css({
            'width' : '100%',
            'height' : 'auto'
        });
    }
}




function getObjectNextKey(o, id){
    var keys = Object.keys( o ),
        idIndex = keys.indexOf( id ),
        nextIndex = idIndex += 1;
    if(nextIndex >= keys.length){
        //we're at the end, there is no next
        return;
    }
    var nextKey = keys[ nextIndex ]
    return nextKey;
};


function getObjectPrevKey(o, id){
    var keys = Object.keys( o ),
        idIndex = keys.indexOf( id ),
        nextIndex = idIndex -= 1;
    if(idIndex === 0){
        //we're at the beginning, there is no previous
        return;
    }
    var nextKey = {
        'key': keys[ nextIndex ],
        'value': keys[ nextIndex ],
    }
    return nextKey;
};


function compareNumeric(a, b) {
    if (a > b) return 1;
    if (a < b) return -1;
}


function objValuesToArray(obj) {
    var array = [];
    for(var i in obj) {
        array.push(obj[i]);
    }
    array.sort(compareNumeric);
    return array;
}



Array.max = function(){
    return Math.max.apply( Math, this );
};



Array.min = function(){
    return Math.min.apply( Math, this);
};



function arrayMax(arr, key){
    var m = -Infinity,
        o = null,
        cur,
        curv,
        i;
    for(i=0; i<arr.length; i++){
        cur = arr[i]
        curv = cur[key]
        if(curv > m){
            m = curv;
            o = cur;
        }
    }
    return o;
}







function isExist(value){
    return typeof value !== 'undefined' ? true : false;
}



function isFunction(variable){
    return typeof variable === 'function' ? true : false;
}



function url(){
    return parse_url(window.location.href);
}



function addZero(i) {
    if (i < 10) {
        i = "0" + i;
    }
    return i+'';
}



function listener(object, type, event, callback) {
    if (object == null || typeof(object) == 'undefined') return;
    switch (event) {
        case 'add':
            if (object.addEventListener) {
                object.addEventListener(type, callback, false);
            } else if (object.attachEvent) {
                object.attachEvent("on" + type, callback);
            } else {
                object["on"+type] = callback;
            }
            break;
        case 'remove':
            if (object.removeEventListener) {
                object.removeEventListener(type, callback, false);
            } else if (object.attachEvent) {
                object.detachEvent("on" + type, callback);
            } else {
                object["on"+type] = callback;
            }
            break;
        default:
            break;
    }
};



function parse_url (str, component) {   // eslint-disable-line camelcase
                                       //       discuss at: http://locutus.io/php/parse_url/
                                       //      original by: Steven Levithan (http://blog.stevenlevithan.com)
                                       // reimplemented by: Brett Zamir (http://brett-zamir.me)
                                       //         input by: Lorenzo Pisani
                                       //         input by: Tony
                                       //      improved by: Brett Zamir (http://brett-zamir.me)
                                       //           note 1: original by http://stevenlevithan.com/demo/parseuri/js/assets/parseuri.js
                                       //           note 1: blog post at http://blog.stevenlevithan.com/archives/parseuri
                                       //           note 1: demo at http://stevenlevithan.com/demo/parseuri/js/assets/parseuri.js
                                       //           note 1: Does not replace invalid characters with '_' as in PHP,
                                       //           note 1: nor does it return false with
                                       //           note 1: a seriously malformed URL.
                                       //           note 1: Besides function name, is essentially the same as parseUri as
                                       //           note 1: well as our allowing
                                       //           note 1: an extra slash after the scheme/protocol (to allow file:/// as in PHP)
                                       //        example 1: parse_url('http://user:pass@host/path?a=v#a')
                                       //        returns 1: {scheme: 'http', host: 'host', user: 'user', pass: 'pass', path: '/path', query: 'a=v', fragment: 'a'}
                                       //        example 2: parse_url('http://en.wikipedia.org/wiki/%22@%22_%28album%29')
                                       //        returns 2: {scheme: 'http', host: 'en.wikipedia.org', path: '/wiki/%22@%22_%28album%29'}
                                       //        example 3: parse_url('https://host.domain.tld/a@b.c/folder')
                                       //        returns 3: {scheme: 'https', host: 'host.domain.tld', path: '/a@b.c/folder'}
                                       //        example 4: parse_url('https://gooduser:secretpassword@www.example.com/a@b.c/folder?foo=bar')
                                       //        returns 4: { scheme: 'https', host: 'www.example.com', path: '/a@b.c/folder', query: 'foo=bar', user: 'gooduser', pass: 'secretpassword' }

    var query

    var mode = (typeof require !== 'undefined' ? require('../info/ini_get')('locutus.parse_url.mode') : undefined) || 'php'

    var key = [
        'source',
        'scheme',
        'authority',
        'userInfo',
        'user',
        'pass',
        'host',
        'port',
        'relative',
        'path',
        'directory',
        'file',
        'query',
        'fragment'
    ]

    // For loose we added one optional slash to post-scheme to catch file:/// (should restrict this)
    var parser = {
        php: new RegExp([
            '(?:([^:\\/?#]+):)?',
            '(?:\\/\\/()(?:(?:()(?:([^:@\\/]*):?([^:@\\/]*))?@)?([^:\\/?#]*)(?::(\\d*))?))?',
            '()',
            '(?:(()(?:(?:[^?#\\/]*\\/)*)()(?:[^?#]*))(?:\\?([^#]*))?(?:#(.*))?)'
        ].join('')),
        strict: new RegExp([
            '(?:([^:\\/?#]+):)?',
            '(?:\\/\\/((?:(([^:@\\/]*):?([^:@\\/]*))?@)?([^:\\/?#]*)(?::(\\d*))?))?',
            '((((?:[^?#\\/]*\\/)*)([^?#]*))(?:\\?([^#]*))?(?:#(.*))?)'
        ].join('')),
        loose: new RegExp([
            '(?:(?![^:@]+:[^:@\\/]*@)([^:\\/?#.]+):)?',
            '(?:\\/\\/\\/?)?',
            '((?:(([^:@\\/]*):?([^:@\\/]*))?@)?([^:\\/?#]*)(?::(\\d*))?)',
            '(((\\/(?:[^?#](?![^?#\\/]*\\.[^?#\\/.]+(?:[?#]|$)))*\\/?)?([^?#\\/]*))',
            '(?:\\?([^#]*))?(?:#(.*))?)'
        ].join(''))
    }

    var m = parser[mode].exec(str)
    var uri = {}
    var i = 14

    while (i--) {
        if (m[i]) {
            uri[key[i]] = m[i]
        }
    }

    if (component) {
        return uri[component.replace('PHP_URL_', '').toLowerCase()]
    }

    if (mode !== 'php') {
        var name = (typeof require !== 'undefined' ? require('../info/ini_get')('locutus.parse_url.queryKey') : undefined) || 'queryKey'
        parser = /(?:^|&)([^&=]*)=?([^&]*)/g
        uri[name] = {}
        query = uri[key[12]] || ''
        query.replace(parser, function ($0, $1, $2) {
            if ($1) {
                uri[name][$1] = $2
            }
        })
    }

    delete uri.source
    return uri
};



function posAbsTop(elem) {
    var size = getViewportSize().height - siteOptions.scrolled();
    $(elem).css({
        'position': 'absolute',
        'top': 'calc(100% - ' + size + 'px)',
        'bottom': 'auto',
        'color': 'gold',
    });
};

function posFTop(elem) {
    $(window).on(siteOptions.trigger.customScroll, function(e, pos) {
        var viewport = getViewportSize(),
            height = $(elem).innerHeight(),
            size = getViewportSize().height - siteOptions.scrolled();
        $(elem).css({
            'position': 'absolute',
            'top': 'calc(100% - ' + size + 'px)',
            'bottom': 'auto',
            'color': 'red',
        });
    });

};

function posFBottom(elem) {
    $(elem).css({
       'position': 'fixed',
        //'top': 'calc(100% - ' + $(elem).innerHeight() + 'px)'
        'top': 'auto',
        'bottom': '0px',
        'color': 'green',
    });
};

function posAbsBottom(elem) {
    //var size = $(elem).innerHeight() - siteOptions.scrolled();
    var size = getViewportSize().height + siteOptions.scrolled();
    $(elem).css({
        'position': 'absolute',
        //'top': 'calc(100% - ' + size + 'px)',
        'top': 'auto',
        'bottom': 'calc(100% - ' + size + 'px)',
        'color': 'grey',
    });
};