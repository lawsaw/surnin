var tooltipAwesome = {


    'default': {
        'container'     : 'tooltipAwesome',
        'wrap'          : 'wrapTooltipAwesome',
        'win'           : 'tooltipAwesome-win',
        'actived'       : 'tooltipAwesome--active', // Класс, по которому
        'scripted'      : 'tooltipAwesome--script', // Класс, который в разметке нужно добавлять к tooltipAwesome для обработки JS'ом
        'freezed'       : 'tooltipAwesome--freeze',
        'stricted'      : 'tooltipAwesome-strict', // атрибут-флаг для строгого показа тултипа
        'attrId'        : 'tooltipAwesome-id', // атрибут-идентификатор
        'mode'          : 'hover',
        'pause'         : 1000,
        'winDistance'   : 20,
        'resizeListener': true
    },



    'getClone' : function(parent) {
        var id = parent.data(this.default.attrId),
            clone = $('.'+this.default.wrap).find('.'+this.default.win+'['+this.default.attrId+'=\''+id+'\']');
        return clone;
    },



    'nativeHide' : function(container) {
        var win = container.find('.'+this.default.win);
        win.addClass(siteOptions.css.visibilityHidden);
    },



    'nativeShow' : function(container) {
        var win = container.find('.'+this.default.win);
        win.removeClass(siteOptions.css.visibilityHidden);
    },



    'hide' : function(container) {
        var clone = this.getClone(container);
        $(clone).removeClass(this.default.actived);
    },



    'show' : function(container) {
        var clone = this.getClone(container);
        $(clone).addClass(this.default.actived);
    },



    'clean' : function() {
        var container = $('.'+this.default.wrap).find('.'+this.default.win);
        container.each(function(){
            var item = $(this);
            item.remove();
        });
    },



    'rule' : function(options) {
        var parentObj = this,
            newOptions = siteOptions.setOptions({
                defaults: parentObj.default,
                source: options
            });

        /*for(var item in this.default) {
            newOptions[item] = isExist(options[item]) ? options[item] : this.default[item];
        }*/

        newOptions['clone'] = this.getClone(newOptions.container);

        switch (newOptions.mode) {
            case 'strict':
                newOptions.clone.off('mouseleave');
                newOptions.container.off('mouseenter').off('mouseleave');
                if(newOptions.container.hasClass(parentObj.default.actived)) {
                    parentObj.show(newOptions.container);
                }
                break;
            case 'hover':
                newOptions.clone
                    .on('mouseleave', function(event){
                        if(!newOptions.container.is(':hover')) {
                            parentObj.hide(newOptions.container);
                        }
                    });
                newOptions.container
                    .on('mouseenter', function(){
                        parentObj.show(newOptions.container);
                    })
                    .on('mouseleave', function(){
                        if(!newOptions.clone.is(':hover')) {
                            parentObj.hide(newOptions.container);
                        }
                    });
                break;
            default:
                break;
        }

    },



    'init' : function(options) {

        var parentObj = this,
            newOptions = siteOptions.setOptions({
                defaults: parentObj.default,
                source: isExist(options) ? options : {}
            });

        function build(newOptions) {
            parentObj.clean();
            var container = $(document).find('.'+newOptions.container+'.'+newOptions.scripted),
                idCounter = 1,
                data = {};
            container.each(function(){
                data.container = $(this),
                data.container.data(newOptions.attrId, idCounter),
                data.win = data.container.find('.'+parentObj.default.win),
                data.position = data.win[0].getBoundingClientRect(),
                parentObj.nativeShow(data.container);
                data.css = {
                    'background'    : data.win.css('background'),
                    'color'         : data.win.css('color'),
                    'padding'       : data.win.css('padding')
                },
                data.content = data.win.html();
                data.clone = $('<div>', {
                    html :  data.content,
                    attr : {
                        'class'                 : data.win.attr('class'),
                        'tooltipAwesome-id'     : idCounter,
                        'tooltipAwesome-strict' : false
                    },
                    css : {
                        'position'      : 'fixed',
                        'top'           : data.position.top,
                        'left'          : data.position.left,
                        'right'         : 'auto',
                        'bottom'        : 'auto',
                        'background'    : data.css.background,
                        'color'         : data.css.color,
                        'padding'       : data.css.padding,
                        'transform'     : 'none',
                        'margin'        : 0
                    },
                    /*on: {
                         mouseleave: function(event){
                             if(!data.container.is(':hover') && !parentObj.isStrict(data.container)) {
                                 console.log('leave');
                                 $(this).removeClass(parentObj.default.actived);
                             }
                         }
                     }*/
                })
                    .appendTo('.'+parentObj.default.wrap);
                parentObj.nativeHide(data.container);
                idCounter++;
                parentObj.rule({
                    container : data.container,
                    mode : data.container.hasClass(parentObj.default.actived) ? 'strict' : newOptions.mode
                });

                if(newOptions.resizeListener) {
                    parentObj.listenPosition(data.container);
                }

            });
            container.each(function(){
                var container = $(this);
                setTimeout(function(){
                    parentObj.updatePosition(container);
                },10);
            });
        };


        build(newOptions);






    },



    'listenPosition': function(container) {
        var parentObj = this;
        $(window).on(
            siteOptions.trigger.defaultScroll + ' ' +
            siteOptions.trigger.defaultResize + ' ' +
            siteOptions.trigger.modalAwesome + ' ' +
            siteOptions.trigger.gridAwesome,
            function(event) {
                //console.log(event);
            parentObj.updatePosition(container);
        });
    },



    'updatePosition': function(container) {
        var clone = this.getClone(container),
            win = container.find('.'+this.default.win),
            pos = win[0].getBoundingClientRect();
        $(clone).css({
            'top' : pos.top,
            'left' : pos.left
        });
        //console.log(pos);
    },



};