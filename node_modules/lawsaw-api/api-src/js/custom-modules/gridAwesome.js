/*

 firstPlay   -   Изначально true, чтобы при первой загрузке страницы не воспроизводить анимацию
 gridAwesome(container, cols, type, animation)   -   Построить сетку. container: контейнер элементоа=в, cols: количество столбцов, type: порядок элементов. Колонками 'row' или строками 'col', animation: анимировать построение true/false
 gridAwesomeRule(container, type, times, period, animation)  -   Адаптировать сетку при изменении ширины экрана. Повторять эту функцию times раз с интервалом period
 gridAwesomeOnce(container, cols, type, animation)   -   тоже, что и gridAwesome(), но повторяется для страховки

 */


var gridAwesome = {


    'default' : {
        'container'         : '.gridAwesome',
        'child'             : '.gridAwesome-item',
        'type'              : 'col',
        'animation'         : true,
        'animationDuration' : 500,
        'animationFunction' : 'ease',
        'pause'             : 1000,
        'size'              : function() {
                                var max = 30, //Max cols
                                    array = [];
                                for(var i = 1; i <= max; i++) {
                                    array.push(i);
                                }
                                return array;
                            }
    },



    'getMaxHeight' : function(array) {
        var maxHeight = array.eq(0).innerHeight();
        array.each(function(){
            var el = $(this);
            maxHeight = el.innerHeight() > maxHeight ? el.innerHeight() : maxHeight;
        });
        return maxHeight;
    },



    'getMaxTop' : function(array) {
        var maxTop = 0;
        array.each(function(){
            var el = $(this);
            maxTop = maxTop + el.innerHeight();
        });
        return maxTop;
    },



    'getPrevRowLength' : function(array, el, cols) {
        var totalHeight = 0,
            elPos = el.index(),
            rows = elPos / cols,
            count = 1;
        while(rows >= count) {
            totalHeight = totalHeight + array.eq(elPos - count*cols).innerHeight();
            count++;
        }
        return totalHeight;
    },



    'getPosData' : function(options) {

        /*
         options.container
         options.cols
         options.type
        */

        var elems = options.container.find(this.default.child),
            count = elems.length,
            rows = count / options.cols,
            width = 100 / options.cols,
            top = 0,
            parentObj = this,
            result = {};
        result['rows'] = [];

        switch (options.type) {

            case 'col':
                for( var i = 0; i <= rows; i++ ) {
                    var itemSlice = elems.slice(i*options.cols,i*options.cols+options.cols),
                        left = 0;
                    itemSlice.each(function(){
                        var el = $(this);
                        result['rows'].push({
                            'width' : width+'%',
                            'left' : left+'%',
                            'top' : top
                        });
                        left = left + width;
                    });
                    top = top + this.getMaxHeight(itemSlice);
                    result['container'] = top;
                }
                break;

            case 'row':
                var left = 0,
                    containerHeight = 0,
                    rowHeights = Array();
                for( var i = 0; i <= options.cols; i++ ) {
                    var itemSlice = elems.slice(i*rows,i*rows+rows),
                        top = 0;
                    rowHeights.push(this.getMaxTop(itemSlice));
                    itemSlice.each(function(){
                        var el = $(this),
                            elHeight = el.innerHeight();
                        result['rows'].push({
                            'width' : width+'%',
                            'left' : left+'%',
                            'top' : top
                        });
                        top = top + elHeight;
                        containerHeight = Math.max.apply(Math, rowHeights);
                    });
                    left = left + width;
                    result['container'] = containerHeight;
                }
                break;

            case 'colrowed':
                var containerHeight = Array();
                for( var i = 0; i <= rows; i++ ) {
                    var itemSlice = elems.slice(i*options.cols,i*options.cols+options.cols),
                        left = 0;
                    itemSlice.each(function(){
                        var el = $(this),
                            elPos = el.index(),
                            elUpper = elems.eq(elPos - options.cols),
                            totalHeight = parentObj.getPrevRowLength(elems, el, options.cols);
                        result['rows'].push({
                            'width' : width+'%',
                            'left' : left+'%',
                            'top' : totalHeight
                        });
                        left = left + width;
                        containerHeight.push(totalHeight + el.innerHeight());
                    });
                    result['container'] = Math.max.apply( Math, containerHeight );
                }
                break;

        }
        return result;

    },



    'setAnimation': function(options){
        var animation = {};
        if(options.animation) {
            animation = {
                'elem' : {
                    'transition' : '' +
                        'left ' + options.animationDuration + 's ' + options.animationFunction + ' 0s, ' +
                        'width ' + options.animationDuration + 's ' + options.animationFunction + ' 0s, ' +
                        'top ' + options.animationDuration + 's ' + options.animationFunction + ' 0s'
                },
                'container' : {
                    'transition' : '' +
                        'height ' + options.animationDuration + 's ' + options.animationFunction + ' 0s, ' +
                        'opacity 0.1s ' + options.animationFunction + ' 0s'
                }
            }
        } else {
            animation = {
                'elem' : {
                    'transition' : 'none'
                },
                'container' : {
                    'transition' : 'none'
                }
            }
        }
        options.elems.each(function(){
            $(this).css(animation.elem);
        });
        options.container.css(animation.container);
    },



    'setPos' : function(options) {
        var parentObj = this;
        for(var i=0; i<options.sizes.length; i++) {
            if((options.sizes[i+1] && isWindowWidth(options.sizes[i], options.sizes[i+1])) || (isWindowWidth(options.sizes[options.sizes.length-1], null))) {
                var data = parentObj.getPosData({
                    'container': options.container,
                    'cols': options.cols[i],
                    'type': options.type
                });
                for(var index=0; index<options.elems.length; index++) {
                    $(options.elems[index]).css({
                        'width' : data.rows[index].width,
                        'left' : data.rows[index].left,
                        'top' : data.rows[index].top
                    })
                }
                options.container.css({
                    'height': data.container
                });
                //console.log(data);
            }
        }
        siteOptions.setDinamicEvent({
            'elem' : options.container,
            'event' : siteOptions.trigger.gridAwesome,
            'time' : options.animationDuration
        });
        //options.container.trigger(siteOptions.trigger.gridAwesome);
    },



    'init' : function(options) {
        var parentObj = this,
            arrayOfSizes = objValuesToArray(siteOptions.responsive),
            newOptions = siteOptions.setOptions({
                defaults: parentObj.default,
                source: isExist(options) ? options : {}
            }),
            cols = siteOptions.getSizes(newOptions.size);
        $(document).find(newOptions.container).each(function(){
            var container = $(this),
                elems = container.find(newOptions.child);
            function build() {
                parentObj.setPos({
                    'container': container,
                    'elems': elems,
                    'cols': cols,
                    'type': newOptions.type,
                    'sizes': arrayOfSizes,
                    'animationDuration' : newOptions.animationDuration
                });
                setTimeout(function(){
                    parentObj.setPos({
                        'container': container,
                        'elems': elems,
                        'cols': cols,
                        'type': newOptions.type,
                        'sizes': arrayOfSizes,
                        'animationDuration' : newOptions.animationDuration
                    });
                },newOptions.animationDuration);
            };
            build();
            setTimeout(function(){
                parentObj.setAnimation({
                    'container': container,
                    'elems': elems,
                    'animation': newOptions.animation,
                    'animationDuration': newOptions.animationDuration/1000,
                    'animationFunction': newOptions.animationFunction
                });
            },1000);
            $(window).on('resize', function() {
                build();
            });
        });
    },




};