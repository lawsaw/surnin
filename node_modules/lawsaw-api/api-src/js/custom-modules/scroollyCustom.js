var scroollyCustom = {


    'content': {},


    'default': {
        'container'   : null,
        'parent'      : null,
        'type'        : 'parent-full',
        'deltaTop'    : 0,
        'deltaBottom' : 0,
        'eventIn'     : null,
        'eventOut'    : null,
        'actionClass'    : null,
    },

    'setPosRule': function(options){
        var parentObj = this,
            css =  {},
            distance = 0;
        options.delta = 0;
        switch(options.position) {
            case 'topAbs':
                if(parentObj.content[options.container] == options.position || parentObj.content[options.container] == 'bottomAbs') {
                    //console.log('topAbs can not be played');
                    return false;
                }
                var distance = siteOptions.scrolled() + parseInt(options.delta) + options.deltaTop;
                css['position'] = 'absolute';
                css['top'] = distance + 'px';
                css['bottom'] = 'auto';
                css['color'] = 'gold';
                parentObj.content[options.container] = options.position;
                //console.log('topAbs');
                break;
            case 'bottomAbs':
                if(parentObj.content[options.container] == options.position || parentObj.content[options.container] == 'topAbs') {
                    //console.log('bottomAbs can not be played');
                    return false;
                }
                var distance = siteOptions.scrolled() - parseInt(options.delta) - options.deltaBottom;
                css['position'] = 'absolute';
                css['top'] = 'auto';
                css['bottom'] = -distance + 'px';
                css['color'] = 'blue';
                parentObj.content[options.container] = options.position;
                //console.log('bottomAbs');
                break;
            case 'topF':
                if(parentObj.content[options.container] == options.position) {
                    //console.log('topF can not be played');
                    return false;
                }
                var distance = 0 + options.deltaTop;
                css['position'] = 'fixed';
                css['top'] = distance + 'px';
                css['bottom'] = 'auto';
                css['color'] = 'red';
                parentObj.content[options.container] = options.position;
                //console.log('topF');
                break;
            case 'bottomF':
                if(parentObj.content[options.container] == options.position /*|| parentObj.content[options.container] == 'topConAbs'*/) {
                    //console.log('bottomF can not be played');
                    return false;
                }
                var distance = 0 + options.deltaBottom;
                css['position'] = 'fixed';
                css['top'] = 'auto';
                css['bottom'] = distance + 'px';
                css['color'] = 'green';
                parentObj.content[options.container] = options.position;
                //console.log('bottomF');
                break;


            case 'topConAbs':
                if(parentObj.content[options.container] == options.position || parentObj.content[options.container] == 'topCon') {
                    //console.log('topConAbs can not be played');
                    return false;
                }
                var distance = 0 + options.deltaTop;
                css['position'] = 'absolute';
                css['top'] = distance + 'px';
                css['bottom'] = 'auto';
                css['color'] = 'orange';
                parentObj.content[options.container] = options.position;
                //console.log('topConAbs');
                break;

            case 'bottomConAbs':
                if(parentObj.content[options.container] == options.position) {
                    //console.log('bottomConAbs can not be played');
                    return false;
                }
                var distance = 0 + options.deltaBottom;
                css['position'] = 'absolute';
                css['top'] = 'auto';
                css['bottom'] = distance + 'px';
                css['color'] = 'pink';
                parentObj.content[options.container] = options.position;
                //console.log('bottomConAbs');
                break;


            case 'conAbs':
                if(parentObj.content[options.container] == options.position) {
                    //console.log('conAbs can not be played');
                    return false;
                }
                var distance = $(options.container).offset().top - $(options.container).parents(options.parent).offset().top;
                if(distance == 0) {
                    parentObj.setPosRule({
                        'container': options.container,
                        'position': 'topConAbs'
                    });
                    return false;
                }


                css['position'] = 'absolute';
                css['top'] = distance + 'px';
                css['bottom'] = 'auto';
                css['color'] = 'cyan';
                parentObj.content[options.container] = options.position;
                //console.log('conAbs');
                break;


            default:
                return false;
                break;
        }
        $(options.container).css(css);
        // setTimeout(function(){
        //     $(options.container).css(css);
        // },500);
    },



    'isElemHigherThanViewport': function(container) {
        return $(container).innerHeight() > getViewportSize().height ? true : false;
    },



    'isElemCloseToContainerTop': function(options) {
        options.distance = isExist(options.distance) ? options.distance : 20;
        return ($(options.container).offset().top - $(options.container).parents(options.parent).offset().top) <= options.distance ? true : false;
    },



    'init': function(options){
        var parentObj = this,
            newOptions = siteOptions.setOptions({
                defaults: parentObj.default,
                source: isExist(options) ? options : {}
            }),
            options = newOptions;
        if($(document).find(options.container).length == 0) {
            return false;
        }



        options['deltaTop'] = isExist(options['deltaTop']) ? options['deltaTop'] : 0;
        options['deltaBottom'] = isExist(options['deltaBottom']) ? options['deltaBottom'] : 0;
        // parentObj.setPosRule({
        //     'container': options.container,
        //     'position': 'topAbs'
        // });
        switch(options.type) {
            case 'full':
                parentObj.typeViewportFull(options);
                break;
            case 'parent-full':
                if(!isExist(options.parent)) {
                    return false;
                }
                parentObj.typeParentFull(options);
                break;
            case 'parent-top':
                if(!isExist(options.parent)) {
                    return false;
                }
                parentObj.typeParentTop(options);
                break;
            case 'parent-bottom':
                if(!isExist(options.parent)) {
                    return false;
                }
                parentObj.typeParentBottom(options);
                break;
            case 'sticky':
                if(!isExist(options.parent)) {
                    return false;
                }
                parentObj.typeSticky(options);
                break;
            default:
                break;
        }
    },



    'typeViewportFull': function(options) {
        var parentObj = this;
        $(options.container).scroolly([
            {
                from: 'el-top - ' + options.deltaTop + 'px = vp-top',
                direction: 1,
                onTopIn: function($element, rule){
                    //console.log('onTopIn; from el-top = vp-top; direction: 1');
                    parentObj.setPosRule({
                        'container': options.container,
                        'position': parentObj.isElemHigherThanViewport(options.container) ? 'topAbs' : 'topF',
                        'deltaTop': options.deltaTop,
                        'deltaBottom': options.deltaBottom,
                    });
                },
            },
            {
                from: 'el-top - ' + options.deltaTop + 'px = vp-top',
                direction: -1,
                onBottomIn: function($element, rule){
                    //console.log('onBottomIn; from el-top = vp-top; direction: -1');
                    parentObj.setPosRule({
                        'container': options.container,
                        'position': parentObj.isElemHigherThanViewport(options.container) ? '' : 'topAbs',
                        'deltaTop': options.deltaTop,
                        'deltaBottom': options.deltaBottom,
                    });
                },
            },
            {
                from: 'el-bottom + ' + options.deltaBottom + 'px = vp-bottom',
                direction: 1,
                onTopIn: function($element, rule){
                    //console.log('onTopIn; from el-bottom = vp-bottom; direction: 1');
                    parentObj.setPosRule({
                        'container': options.container,
                        'position': parentObj.isElemHigherThanViewport(options.container) ? 'bottomF' : 'bottomAbs',
                        'deltaTop': options.deltaTop,
                        'deltaBottom': options.deltaBottom,
                    });
                },
            },
            {
                to: 'el-bottom + ' + options.deltaBottom + 'px = vp-bottom',
                direction: -1,
                onBottomIn: function($element, rule){
                    //console.log('onBottomIn; from el-bottom = vp-bottom; direction: -1');
                    parentObj.setPosRule({
                        'container': options.container,
                        'position': parentObj.isElemHigherThanViewport(options.container) ? 'bottomAbs' : 'bottomF',
                        'deltaTop': options.deltaTop,
                        'deltaBottom': options.deltaBottom,
                    });
                },
                onBottomOut: function($element, rule){
                    //console.log('88 onBottomOut:::');
                    parentObj.setPosRule({
                        'container': options.container,
                        'position': parentObj.isElemHigherThanViewport(options.container) ? '' : 'bottomAbs',
                        'deltaTop': options.deltaTop,
                        'deltaBottom': options.deltaBottom,
                    });
                },
            },
            {
                to: 'el-top - ' + options.deltaTop + 'px = vp-top',
                direction: -1,
                onBottomIn: function($element, rule){
                    //console.log('onBottomIn; from el-top = vp-top; direction: -1');
                    parentObj.setPosRule({
                        'container': options.container,
                        'position': parentObj.isElemHigherThanViewport(options.container) ? 'topF' : '',
                        'deltaTop': options.deltaTop,
                        'deltaBottom': options.deltaBottom,
                    });
                },
            },
            {
                from: 'el-bottom + ' + options.deltaBottom + 'px = vp-bottom',
                direction: -1,
                onBottomIn: function($element, rule){
                    //console.log('onBottomIn; from el-bottom = vp-bottom; direction: -1');
                    parentObj.setPosRule({
                        'container': options.container,
                        'position': parentObj.isElemHigherThanViewport(options.container) ? 'bottomAbs' : '',
                        'deltaTop': options.deltaTop,
                        'deltaBottom': options.deltaBottom,
                    });
                },
            },
        ]);

    }, 



    'typeParentFull': function(options) {
        var parentObj = this;
        parentObj.setPosRule({
            'container': options.container,
            'position': 'topConAbs',
            'deltaTop': options.deltaTop,
            'deltaBottom': options.deltaBottom,
        });
        $(options.container).scroolly([
            {
                to: 'el-top - ' + options.deltaTop + 'px = vp-top',
                direction: 1,
                onBottomOut: function($element, rule){
                    //console.log('55 onBottomOut:::');
                    parentObj.setPosRule({
                        'container': options.container,
                        'position': 'topF',
                        'deltaTop': options.deltaTop,
                        'deltaBottom': options.deltaBottom,
                    });
                },
            },
            {
                from: 'el-bottom + ' + options.deltaBottom + 'px = con-bottom',
                direction: 1,
                onBottomOut: function($element, rule){
                    //console.log('3 onBottomOut:::');
                    parentObj.setPosRule({
                        'container': options.container,
                        'position': 'bottomConAbs',
                        'deltaTop': options.deltaTop,
                        'deltaBottom': options.deltaBottom,
                    });
                },
            },
            {
                from: 'el-bottom + ' + options.deltaBottom + 'px = vp-bottom',
                direction: -1,
                onTopOut: function($element, rule){
                    //console.log('8 onTopOut:::');
                    parentObj.setPosRule({
                        'container': options.container,
                        'position': !parentObj.isElemCloseToContainerTop({'container': options.container,'parent': options.parent,'distance': options.deltaTop}) ? 'bottomF' : '',
                        'deltaTop': options.deltaTop,
                        'deltaBottom': options.deltaBottom,
                    });
                },
            },
            {
                to: 'el-top - ' + options.deltaTop + 'px = con-top',
                direction: -1,
                onTopOut: function($element, rule){
                    //console.log('22 onTopOut:::');
                    parentObj.setPosRule({
                        'container': options.container,
                        'position': 'topConAbs',
                        'deltaTop': options.deltaTop,
                        'deltaBottom': options.deltaBottom,
                    });
                },
            },
            {
                from: 'el-top - ' + options.deltaTop + 'px = vp-top',
                direction: -1,
                onBottomIn: function($element, rule){
                    //console.log('6 onBottomIn:::');
                    parentObj.setPosRule({
                        'container': options.container,
                        'position': 'conAbs',
                        'deltaTop': options.deltaTop,
                        'deltaBottom': options.deltaBottom,
                    });
                },
            },
            {
                from: 'el-bottom + ' + options.deltaBottom + 'px = vp-bottom',
                direction: 1,
                onTopIn: function($element, rule){
                    //console.log('7 onTopIn:::');
                    parentObj.setPosRule({
                        'container': options.container,
                        'position': 'conAbs',
                        'deltaTop': options.deltaTop,
                        'deltaBottom': options.deltaBottom,
                    });
                },
            },
            {
                to: 'el-bottom + ' + options.deltaBottom + 'px= vp-bottom',
                direction: -1,
                onBottomOut: function($element, rule){
                    //console.log('88 onBottomOut:::');
                    parentObj.setPosRule({
                        'container': options.container,
                        'position': 'conAbs',
                        'deltaTop': options.deltaTop,
                        'deltaBottom': options.deltaBottom,
                    });
                },
            },

        ],$(options.parent));
    },



    'typeParentTop': function(options) {
        var parentObj = this;
        parentObj.setPosRule({
            'container': options.container,
            'position': 'topConAbs',
            'deltaTop': options.deltaTop,
            'deltaBottom': options.deltaBottom,
        });
        $(options.container).scroolly([

            {
                from: 'el-top - ' + options.deltaTop + 'px = con-top',
                direction: -1,
                onBottomIn: function($element, rule){
                    //console.log('2 onBottomIn:::');
                    parentObj.setPosRule({
                        'container': options.container,
                        'position': 'topConAbs',
                        'deltaTop': options.deltaTop,
                        'deltaBottom': options.deltaBottom,
                    });
                },
            },
            {
                from: 'el-bottom + ' + options.deltaBottom + 'px = con-bottom',
                direction: 1,
                onBottomOut: function($element, rule){
                    //console.log('3 onBottomOut:::');
                    parentObj.setPosRule({
                        'container': options.container,
                        'position': 'bottomConAbs',
                        'deltaTop': options.deltaTop,
                        'deltaBottom': options.deltaBottom,
                    });
                },
            },
            {
                from: 'el-top - ' + options.deltaTop + 'px = vp-top',
                direction: 1,
                onTopIn: function($element, rule){
                    //console.log('5 onTopIn:::');
                    parentObj.setPosRule({
                        'container': options.container,
                        'position': 'topF',
                        'deltaTop': options.deltaTop,
                        'deltaBottom': options.deltaBottom,
                    });
                },
            },
            {
                from: 'el-top - ' + options.deltaTop + 'px = vp-top',
                direction: -1,
                onTopOut: function($element, rule){
                    //console.log('6 onTopOut:::');
                    parentObj.setPosRule({
                        'container': options.container,
                        'position': parentObj.isElemCloseToContainerTop({'container': options.container,'parent': options.parent,'distance': options.deltaTop}) ? 'topConAbs' : 'topF',
                        'deltaTop': options.deltaTop,
                        'deltaBottom': options.deltaBottom,
                    });
                },
            },
        ],$(options.parent));

    },



    'typeParentBottom': function(options) {
        var parentObj = this;
        parentObj.setPosRule({
            'container': options.container,
            'position': 'bottomConAbs',
            'deltaTop': options.deltaTop,
            'deltaBottom': options.deltaBottom,
        });
        $(options.container).scroolly([

            {
                from: 'el-top - ' + options.deltaTop + 'px = con-top',
                direction: -1,
                onBottomIn: function($element, rule){
                    //console.log('2 onBottomIn:::');
                    parentObj.setPosRule({
                        'container': options.container,
                        'position': 'topConAbs',
                        'deltaTop': options.deltaTop,
                        'deltaBottom': options.deltaBottom,
                    });
                },
            },
            {
                from: 'el-bottom + ' + options.deltaBottom + 'px = con-bottom',
                direction: 1,
                onBottomOut: function($element, rule){
                    //console.log('3 onBottomOut:::');
                    parentObj.setPosRule({
                        'container': options.container,
                        'position': 'bottomConAbs',
                        'deltaTop': options.deltaTop,
                        'deltaBottom': options.deltaBottom,
                    });
                },
            },
            {
                from: 'el-bottom + ' + options.deltaBottom + 'px = vp-bottom',
                direction: 1,
                onTopIn: function($element, rule){
                    //console.log('7 onTopIn:::');
                    parentObj.setPosRule({
                        'container': options.container,
                        'position': 'bottomF',
                        'deltaTop': options.deltaTop,
                        'deltaBottom': options.deltaBottom,
                    });
                },
            },
            {
                from: 'el-bottom + ' + options.deltaBottom + 'px = vp-bottom',
                direction: -1,
                onTopOut: function($element, rule){
                    //console.log('8 onTopOut:::');
                    parentObj.setPosRule({
                        'container': options.container,
                        'position': parentObj.isElemCloseToContainerTop({'container': options.container,'parent': options.parent,'distance': options.deltaTop}) ? 'topConAbs' : 'bottomF',
                        'deltaTop': options.deltaTop,
                        'deltaBottom': options.deltaBottom,
                    });
                },
            },

        ],$(options.parent));

    },



    'typeSticky': function(options) {
        $(options.container).scroolly([
            {
                to: 'con-top - ' + options.deltaTop + 'px',
                removeClass: options.actionClass,
                // css: {
                //     position: 'relative',
                //     top: ''
                // },
                onCheckIn: function($element, rule){
                    if(!options.eventOut) { return false; } $(window).trigger(options.eventOut, options);
                },
            },
            {
                from: 'con-top - ' + options.deltaTop + 'px',
                addClass: options.actionClass,
                // css: {
                //     position: 'fixed',
                //     top: 0
                // },
                onCheckIn: function($element, rule){
                    if(!options.eventIn) { return false; } $(window).trigger(options.eventIn, options);
                },
            }
        ], $(options.parent));

    },


};




// {
//     from: 'el-top = con-top',
//         direction: 1,
//     onTopIn: function($element, rule){ console.log('1 onTopIn:::'); },
//     onTopOut: function($element, rule){ console.log('1 onTopOut:::'); },
//     onBottomIn: function($element, rule){ console.log('1 onBottomIn:::'); },
//     onBottomOut: function($element, rule){ console.log('1 onBottomOut:::'); },
// },
// {
//     from: 'el-top = con-top',
//         direction: -1,
//     onTopIn: function($element, rule){ console.log('2 onTopIn:::'); },
//     onTopOut: function($element, rule){ console.log('2 onTopOut:::'); },
//     onBottomIn: function($element, rule){ console.log('2 onBottomIn:::'); },
//     onBottomOut: function($element, rule){ console.log('2 onBottomOut:::'); },
// },
// {
//     from: 'el-bottom = con-bottom',
//         direction: 1,
//     onTopIn: function($element, rule){ console.log('3 onTopIn:::'); },
//     onTopOut: function($element, rule){ console.log('3 onTopOut:::'); },
//     onBottomIn: function($element, rule){ console.log('3 onBottomIn:::'); },
//     onBottomOut: function($element, rule){ console.log('3 onBottomOut:::'); },
// },
// {
//     from: 'el-bottom = con-bottom',
//         direction: -1,
//     onTopIn: function($element, rule){ console.log('4 onTopIn:::'); },
//     onTopOut: function($element, rule){ console.log('4 onTopOut:::'); },
//     onBottomIn: function($element, rule){ console.log('4 onBottomIn:::'); },
//     onBottomOut: function($element, rule){ console.log('4 onBottomOut:::'); },
// },
// {
//     from: 'el-top = vp-top',
//         direction: 1,
//     onTopIn: function($element, rule){ console.log('5 onTopIn:::'); },
//     onTopOut: function($element, rule){ console.log('5 onTopOut:::'); },
//     onBottomIn: function($element, rule){ console.log('5 onBottomIn:::'); },
//     onBottomOut: function($element, rule){ console.log('5 onBottomOut:::'); },
// },
// {
//     from: 'el-top = vp-top',
//         direction: -1,
//     onTopIn: function($element, rule){ console.log('6 onTopIn:::'); },
//     onTopOut: function($element, rule){ console.log('6 onTopOut:::'); },
//     onBottomIn: function($element, rule){ console.log('6 onBottomIn:::'); },
//     onBottomOut: function($element, rule){ console.log('6 onBottomOut:::'); },
// },
// {
//     from: 'el-bottom = vp-bottom',
//         direction: 1,
//     onTopIn: function($element, rule){ console.log('7 onTopIn:::'); },
//     onTopOut: function($element, rule){ console.log('7 onTopOut:::'); },
//     onBottomIn: function($element, rule){ console.log('7 onBottomIn:::'); },
//     onBottomOut: function($element, rule){ console.log('7 onBottomOut:::'); },
// },
// {
//     from: 'el-bottom = vp-bottom',
//         direction: -1,
//     onTopIn: function($element, rule){ console.log('8 onTopIn:::'); },
//     onTopOut: function($element, rule){ console.log('8 onTopOut:::'); },
//     onBottomIn: function($element, rule){ console.log('8 onBottomIn:::'); },
//     onBottomOut: function($element, rule){ console.log('8 onBottomOut:::'); },
// },
//
//
//
//
//
//
// {
//     to: 'el-top = con-top',
//         direction: 1,
//     onTopIn: function($element, rule){ console.log('11 onTopIn:::'); },
//     onTopOut: function($element, rule){ console.log('11 onTopOut:::'); },
//     onBottomIn: function($element, rule){ console.log('11 onBottomIn:::'); },
//     onBottomOut: function($element, rule){ console.log('11 onBottomOut:::'); },
// },
// {
//     to: 'el-top = con-top',
//         direction: -1,
//     onTopIn: function($element, rule){ console.log('22 onTopIn:::'); },
//     onTopOut: function($element, rule){ console.log('22 onTopOut:::'); },
//     onBottomIn: function($element, rule){ console.log('22 onBottomIn:::'); },
//     onBottomOut: function($element, rule){ console.log('22 onBottomOut:::'); },
// },
// {
//     to: 'el-bottom = con-bottom',
//         direction: 1,
//     onTopIn: function($element, rule){ console.log('33 onTopIn:::'); },
//     onTopOut: function($element, rule){ console.log('33 onTopOut:::'); },
//     onBottomIn: function($element, rule){ console.log('33 onBottomIn:::'); },
//     onBottomOut: function($element, rule){ console.log('33 onBottomOut:::'); },
// },
// {
//     to: 'el-bottom = con-bottom',
//         direction: -1,
//     onTopIn: function($element, rule){ console.log('44 onTopIn:::'); },
//     onTopOut: function($element, rule){ console.log('44 onTopOut:::'); },
//     onBottomIn: function($element, rule){ console.log('44 onBottomIn:::'); },
//     onBottomOut: function($element, rule){ console.log('44 onBottomOut:::'); },
// },
// {
//     to: 'el-top = vp-top',
//         direction: 1,
//     onTopIn: function($element, rule){ console.log('55 onTopIn:::'); },
//     onTopOut: function($element, rule){ console.log('55 onTopOut:::'); },
//     onBottomIn: function($element, rule){ console.log('55 onBottomIn:::'); },
//     onBottomOut: function($element, rule){ console.log('55 onBottomOut:::'); },
// },
// {
//     to: 'el-top = vp-top',
//         direction: -1,
//     onTopIn: function($element, rule){ console.log('66 onTopIn:::'); },
//     onTopOut: function($element, rule){ console.log('66 onTopOut:::'); },
//     onBottomIn: function($element, rule){ console.log('66 onBottomIn:::'); },
//     onBottomOut: function($element, rule){ console.log('66 onBottomOut:::'); },
// },
// {
//     to: 'el-bottom = vp-bottom',
//         direction: 1,
//     onTopIn: function($element, rule){ console.log('77 onTopIn:::'); },
//     onTopOut: function($element, rule){ console.log('77 onTopOut:::'); },
//     onBottomIn: function($element, rule){ console.log('77 onBottomIn:::'); },
//     onBottomOut: function($element, rule){ console.log('77 onBottomOut:::'); },
// },
// {
//     to: 'el-bottom = vp-bottom',
//         direction: -1,
//     onTopIn: function($element, rule){ console.log('88 onTopIn:::'); },
//     onTopOut: function($element, rule){ console.log('88 onTopOut:::'); },
//     onBottomIn: function($element, rule){ console.log('88 onBottomIn:::'); },
//     onBottomOut: function($element, rule){ console.log('88 onBottomOut:::'); },
// },





// {
//     from: 'el-top = vp-top',
//     direction: 1,
//     //onScroll: function($element, offset, length, rule){ console.log('1 onScroll::: ' + 'offset: ' + offset + '; length: ' + length); },
//     // onCheckIn: function($element, rule){ console.log('1 onCheckIn:::'); },
//     // onCheckOut: function($element, rule){ console.log('1 onCheckOut:::'); },
//     onTopIn: function($element, rule){ console.log('1 onTopIn:::'); },
//     onTopOut: function($element, rule){ console.log('1 onTopOut:::'); },
//     onBottomIn: function($element, rule){ console.log('1 onBottomIn:::'); },
//     onBottomOut: function($element, rule){ console.log('1 onBottomOut:::'); },
//     //onDirectionChanged: function($element, direction, rule){ console.log('1 onDirectionChanged::: ' + 'direction: ' + direction); },
// },
// // {
// //     from: 'el-top = vp-bottom',
// //     direction: 1,
// //     //onScroll: function($element, offset, length, rule){ console.log('2 onScroll::: ' + 'offset: ' + offset + '; length: ' + length); },
// //     // onCheckIn: function($element, rule){ console.log('2 onCheckIn:::'); },
// //     // onCheckOut: function($element, rule){ console.log('2 onCheckOut:::'); },
// //     onTopIn: function($element, rule){ console.log('2 onTopIn:::'); },
// //     onTopOut: function($element, rule){ console.log('2 onTopOut:::'); },
// //     onBottomIn: function($element, rule){ console.log('2 onBottomIn:::'); },
// //     onBottomOut: function($element, rule){ console.log('2 onBottomOut:::'); },
// //     //onDirectionChanged: function($element, direction, rule){ console.log('2 onDirectionChanged::: ' + 'direction: ' + direction); },
// // },
// // {
// //     from: 'el-bottom = vp-top',
// //     direction: 1,
// //     //onScroll: function($element, offset, length, rule){ console.log('3 onScroll::: ' + 'offset: ' + offset + '; length: ' + length); },
// //     // onCheckIn: function($element, rule){ console.log('3 onCheckIn:::'); },
// //     // onCheckOut: function($element, rule){ console.log('3 onCheckOut:::'); },
// //     onTopIn: function($element, rule){ console.log('3 onTopIn:::'); },
// //     onTopOut: function($element, rule){ console.log('3 onTopOut:::'); },
// //     onBottomIn: function($element, rule){ console.log('3 onBottomIn:::'); },
// //     onBottomOut: function($element, rule){ console.log('3 onBottomOut:::'); },
// //     //onDirectionChanged: function($element, direction, rule){ console.log('3 onDirectionChanged::: ' + 'direction: ' + direction); },
// // },
// {
//     from: 'el-bottom = vp-bottom',
//     direction: 1,
//     //onScroll: function($element, offset, length, rule){ console.log('4 onScroll::: ' + 'offset: ' + offset + '; length: ' + length); },
//     // onCheckIn: function($element, rule){ console.log('4 onCheckIn:::'); },
//     // onCheckOut: function($element, rule){ console.log('4 onCheckOut:::'); },
//     onTopIn: function($element, rule){ console.log('4 onTopIn:::'); },
//     onTopOut: function($element, rule){ console.log('4 onTopOut:::'); },
//     onBottomIn: function($element, rule){ console.log('4 onBottomIn:::'); },
//     onBottomOut: function($element, rule){ console.log('4 onBottomOut:::'); },
//     //onDirectionChanged: function($element, direction, rule){ console.log('4 onDirectionChanged::: ' + 'direction: ' + direction); },
// },
//
//
//
//
// {
//     from: 'el-top = vp-top',
//     direction: -1,
//     //onScroll: function($element, offset, length, rule){ console.log('1 onScroll::: ' + 'offset: ' + offset + '; length: ' + length); },
//     // onCheckIn: function($element, rule){ console.log('11 onCheckIn:::'); },
//     // onCheckOut: function($element, rule){ console.log('11 onCheckOut:::'); },
//     onTopIn: function($element, rule){ console.log('11 onTopIn:::'); },
//     onTopOut: function($element, rule){ console.log('11 onTopOut:::'); },
//     onBottomIn: function($element, rule){ console.log('11 onBottomIn:::'); },
//     onBottomOut: function($element, rule){ console.log('11 onBottomOut:::'); },
//     //onDirectionChanged: function($element, direction, rule){ console.log('11 onDirectionChanged::: ' + 'direction: ' + direction); },
// },
// // {
// //     from: 'el-top = vp-bottom',
// //     direction: -1,
// //     //onScroll: function($element, offset, length, rule){ console.log('2 onScroll::: ' + 'offset: ' + offset + '; length: ' + length); },
// //     // onCheckIn: function($element, rule){ console.log('22 onCheckIn:::'); },
// //     // onCheckOut: function($element, rule){ console.log('22 onCheckOut:::'); },
// //     onTopIn: function($element, rule){ console.log('22 onTopIn:::'); },
// //     onTopOut: function($element, rule){ console.log('22 onTopOut:::'); },
// //     onBottomIn: function($element, rule){ console.log('22 onBottomIn:::'); },
// //     onBottomOut: function($element, rule){ console.log('22 onBottomOut:::'); },
// //     //onDirectionChanged: function($element, direction, rule){ console.log('22 onDirectionChanged::: ' + 'direction: ' + direction); },
// // },
// // {
// //     from: 'el-bottom = vp-top',
// //     direction: -1,
// //     //onScroll: function($element, offset, length, rule){ console.log('3 onScroll::: ' + 'offset: ' + offset + '; length: ' + length); },
// //     // onCheckIn: function($element, rule){ console.log('33 onCheckIn:::'); },
// //     // onCheckOut: function($element, rule){ console.log('33 onCheckOut:::'); },
// //     onTopIn: function($element, rule){ console.log('33 onTopIn:::'); },
// //     onTopOut: function($element, rule){ console.log('33 onTopOut:::'); },
// //     onBottomIn: function($element, rule){ console.log('33 onBottomIn:::'); },
// //     onBottomOut: function($element, rule){ console.log('33 onBottomOut:::'); },
// //     //onDirectionChanged: function($element, direction, rule){ console.log('33 onDirectionChanged::: ' + 'direction: ' + direction); },
// // },
// {
//     from: 'el-bottom = vp-bottom',
//     direction: -1,
//     //onScroll: function($element, offset, length, rule){ console.log('4 onScroll::: ' + 'offset: ' + offset + '; length: ' + length); },
//     // onCheckIn: function($element, rule){ console.log('44 onCheckIn:::'); },
//     // onCheckOut: function($element, rule){ console.log('44 onCheckOut:::'); },
//     onTopIn: function($element, rule){ console.log('44 onTopIn:::'); },
//     onTopOut: function($element, rule){ console.log('44 onTopOut:::'); },
//     onBottomIn: function($element, rule){ console.log('44 onBottomIn:::'); },
//     onBottomOut: function($element, rule){ console.log('44 onBottomOut:::'); },
//     //onDirectionChanged: function($element, direction, rule){ console.log('44 onDirectionChanged::: ' + 'direction: ' + direction); },
// },
//
//
//
//
//
// {
//     to: 'el-top = vp-top',
//     direction: 1,
//     //onScroll: function($element, offset, length, rule){ console.log('1 onScroll::: ' + 'offset: ' + offset + '; length: ' + length); },
//     // onCheckIn: function($element, rule){ console.log('1 onCheckIn:::'); },
//     // onCheckOut: function($element, rule){ console.log('1 onCheckOut:::'); },
//     onTopIn: function($element, rule){ console.log('111 onTopIn:::'); },
//     onTopOut: function($element, rule){ console.log('111 onTopOut:::'); },
//     onBottomIn: function($element, rule){ console.log('111 onBottomIn:::'); },
//     onBottomOut: function($element, rule){ console.log('111 onBottomOut:::'); },
//     //onDirectionChanged: function($element, direction, rule){ console.log('1 onDirectionChanged::: ' + 'direction: ' + direction); },
// },
// // {
// //     to: 'el-top = vp-bottom',
// //     direction: 1,
// //     //onScroll: function($element, offset, length, rule){ console.log('2 onScroll::: ' + 'offset: ' + offset + '; length: ' + length); },
// //     // onCheckIn: function($element, rule){ console.log('2 onCheckIn:::'); },
// //     // onCheckOut: function($element, rule){ console.log('2 onCheckOut:::'); },
// //     onTopIn: function($element, rule){ console.log('222 onTopIn:::'); },
// //     onTopOut: function($element, rule){ console.log('222 onTopOut:::'); },
// //     onBottomIn: function($element, rule){ console.log('222 onBottomIn:::'); },
// //     onBottomOut: function($element, rule){ console.log('222 onBottomOut:::'); },
// //     //onDirectionChanged: function($element, direction, rule){ console.log('2 onDirectionChanged::: ' + 'direction: ' + direction); },
// // },
// // {
// //     to: 'el-bottom = vp-top',
// //     direction: 1,
// //     //onScroll: function($element, offset, length, rule){ console.log('3 onScroll::: ' + 'offset: ' + offset + '; length: ' + length); },
// //     // onCheckIn: function($element, rule){ console.log('3 onCheckIn:::'); },
// //     // onCheckOut: function($element, rule){ console.log('3 onCheckOut:::'); },
// //     onTopIn: function($element, rule){ console.log('333 onTopIn:::'); },
// //     onTopOut: function($element, rule){ console.log('333 onTopOut:::'); },
// //     onBottomIn: function($element, rule){ console.log('333 onBottomIn:::'); },
// //     onBottomOut: function($element, rule){ console.log('333 onBottomOut:::'); },
// //     //onDirectionChanged: function($element, direction, rule){ console.log('3 onDirectionChanged::: ' + 'direction: ' + direction); },
// // },
// {
//     to: 'el-bottom = vp-bottom',
//     direction: 1,
//     //onScroll: function($element, offset, length, rule){ console.log('4 onScroll::: ' + 'offset: ' + offset + '; length: ' + length); },
//     // onCheckIn: function($element, rule){ console.log('4 onCheckIn:::'); },
//     // onCheckOut: function($element, rule){ console.log('4 onCheckOut:::'); },
//     onTopIn: function($element, rule){ console.log('444 onTopIn:::'); },
//     onTopOut: function($element, rule){ console.log('444 onTopOut:::'); },
//     onBottomIn: function($element, rule){ console.log('444 onBottomIn:::'); },
//     onBottomOut: function($element, rule){ console.log('444 onBottomOut:::'); },
//     //onDirectionChanged: function($element, direction, rule){ console.log('4 onDirectionChanged::: ' + 'direction: ' + direction); },
// },
//
//
//
//
// {
//     to: 'el-top = vp-top',
//     direction: -1,
//     //onScroll: function($element, offset, length, rule){ console.log('1 onScroll::: ' + 'offset: ' + offset + '; length: ' + length); },
//     // onCheckIn: function($element, rule){ console.log('11 onCheckIn:::'); },
//     // onCheckOut: function($element, rule){ console.log('11 onCheckOut:::'); },
//     onTopIn: function($element, rule){ console.log('11111 onTopIn:::'); },
//     onTopOut: function($element, rule){ console.log('11111 onTopOut:::'); },
//     onBottomIn: function($element, rule){ console.log('11111 onBottomIn:::'); },
//     onBottomOut: function($element, rule){ console.log('11111 onBottomOut:::'); },
//     //onDirectionChanged: function($element, direction, rule){ console.log('11 onDirectionChanged::: ' + 'direction: ' + direction); },
// },
// // {
// //     to: 'el-top = vp-bottom',
// //     direction: -1,
// //     //onScroll: function($element, offset, length, rule){ console.log('2 onScroll::: ' + 'offset: ' + offset + '; length: ' + length); },
// //     // onCheckIn: function($element, rule){ console.log('22 onCheckIn:::'); },
// //     // onCheckOut: function($element, rule){ console.log('22 onCheckOut:::'); },
// //     onTopIn: function($element, rule){ console.log('22222 onTopIn:::'); },
// //     onTopOut: function($element, rule){ console.log('22222 onTopOut:::'); },
// //     onBottomIn: function($element, rule){ console.log('22222 onBottomIn:::'); },
// //     onBottomOut: function($element, rule){ console.log('22222 onBottomOut:::'); },
// //     //onDirectionChanged: function($element, direction, rule){ console.log('22 onDirectionChanged::: ' + 'direction: ' + direction); },
// // },
// // {
// //     to: 'el-bottom = vp-top',
// //     direction: -1,
// //     //onScroll: function($element, offset, length, rule){ console.log('3 onScroll::: ' + 'offset: ' + offset + '; length: ' + length); },
// //     // onCheckIn: function($element, rule){ console.log('33 onCheckIn:::'); },
// //     // onCheckOut: function($element, rule){ console.log('33 onCheckOut:::'); },
// //     onTopIn: function($element, rule){ console.log('33333 onTopIn:::'); },
// //     onTopOut: function($element, rule){ console.log('33333 onTopOut:::'); },
// //     onBottomIn: function($element, rule){ console.log('33333 onBottomIn:::'); },
// //     onBottomOut: function($element, rule){ console.log('33333 onBottomOut:::'); },
// //     //onDirectionChanged: function($element, direction, rule){ console.log('33 onDirectionChanged::: ' + 'direction: ' + direction); },
// // },
// {
//     to: 'el-bottom = vp-bottom',
//     direction: -1,
//     //onScroll: function($element, offset, length, rule){ console.log('4 onScroll::: ' + 'offset: ' + offset + '; length: ' + length); },
//     // onCheckIn: function($element, rule){ console.log('44 onCheckIn:::'); },
//     // onCheckOut: function($element, rule){ console.log('44 onCheckOut:::'); },
//     onTopIn: function($element, rule){ console.log('44444 onTopIn:::'); },
//     onTopOut: function($element, rule){ console.log('44444 onTopOut:::'); },
//     onBottomIn: function($element, rule){ console.log('44444 onBottomIn:::'); },
//     onBottomOut: function($element, rule){ console.log('44444 onBottomOut:::'); },
//     //onDirectionChanged: function($element, direction, rule){ console.log('44 onDirectionChanged::: ' + 'direction: ' + direction); },
// },