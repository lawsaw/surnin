var timerAwesome = {


    'default': {
        'container'     : '.timerAwesome',
        'data'          : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9],
        'type'          : 'type1', // type2
        'mode'          : 'string', // time clock
        'direction'     : 'topBottom', // bottomTop leftRight rightLeft,
        'pause'         : 1000,
        'speed'         : 1000,
        'period'        : 1000,
        'loop'          : false,
        'rotateType'    : '',
        'cover'         : {
                            'active'    : true,
                            'content'   : 'Ж',
                        },
        'callback'      : function(options){
                            console.log('finish timer ' + options.container);
                        },
        'timer'         : {
                            'target' : '26-08-2017 15:44:40',
                            'src'    : {},
                            'current': 0,
                        },
        'play'          : true,

        'rotation'      : {}, // do not change it
        'dataIndex'     : 0,
        'setInterval'   : '',
    },




    'init': function(options) {

        var parentObj = this;

        options = siteOptions.setOptions({
            defaults: this.default,
            source: isExist(options) ? options : {}
        });

        if($(document).find(options.container).length == 0){
            console.log(options.container + ' is not found in document');
            return false;
        }

        this.setRotationRule(options);

        options['content'] = {};
        options.content['pres'] = $(options.container).find('.timerAwesome-content-pres.timerAwesome-content-active');
        options.content['next'] = $(options.container).find('.timerAwesome-content-next.timerAwesome-content-active');

        options.period = options.period < options.speed ? options.speed : options.period; // нельзя, чтобы период был меньше скорости анимации

        switch (options.mode) {
            case 'string':
                parentObj.modeString(options);
                break;
            case 'clock-seconds':
            case 'clock-minutes':
            case 'clock-hours':
                parentObj.modeClock(options);
                break;
            case 'timer-seconds':
            case 'timer-minutes':
            case 'timer-hours':
                parentObj.modeTimer(options);
                break;
            default:
                break;
        }

    },



    'setRotationRule': function(options) {
        switch (options.type) {
            case 'type1':
                switch (options.direction) {
                    case 'topBottom':
                        options.rotation = {
                            'pin' : $(options.container).find('.timerAwesome-item-front .timerAwesome-bottom'),
                            'beg' : 0,
                            'end' : 180,
                        };
                        options.rotateType = 'rotateX';
                        break;
                    case 'bottomTop':
                        options.rotation = {
                            'pin' : $(options.container).find('.timerAwesome-item-front .timerAwesome-top'),
                            'beg' : 0,
                            'end' : -180,
                        };
                        options.rotateType = 'rotateX';
                        break;
                    case 'leftRight':
                        options.rotation = {
                            'pin' : $(options.container).find('.timerAwesome-item-front .timerAwesome-bottom'),
                            'beg' : 0,
                            'end' : 180,
                        };
                        options.rotateType = 'rotateX';
                        $(options.container).addClass('timerAwesome-leftRight');
                        break;
                    case 'rightLeft':
                        options.rotation = {
                            'pin' : $(options.container).find('.timerAwesome-item-front .timerAwesome-bottom'),
                            'beg' : 0,
                            'end' : 180,
                        };
                        options.rotateType = 'rotateX';
                        $(options.container).addClass('timerAwesome-rightLeft');
                        break;
                    default:
                        break;
                }
                break;
            case 'type2':
                switch (options.direction) {
                    case 'topBottom':
                        options.rotation = {
                            'pin' : $(options.container).find('.timerAwesome-bottom'),
                            'beg' : 0,
                            'end' : (360 - 360/4 + 90/2),
                        };
                        options.rotateType = 'rotateX';
                        $(options.rotation.pin).css({
                            'transform-origin' : 'center top'
                        });
                        break;
                    case 'bottomTop':
                        options.rotation = {
                            'pin' : $(options.container).find('.timerAwesome-top'),
                            'beg' : (360 - 360/4 + 90/2),
                            'end' : 0,
                        };
                        options.rotateType = 'rotateX';
                        $(options.rotation.pin).css({
                            'transform-origin' : 'center top'
                        });
                        break;
                    case 'topBottomBack':
                        options.rotation = {
                            'pin' : $(options.container).find('.timerAwesome-bottom'),
                            'beg' : 0,
                            'end' : (0 - 360 + 90/2),
                        };
                        options.rotateType = 'rotateX';
                        $(options.rotation.pin).css({
                            'transform-origin' : 'center bottom'
                        });
                        break;
                    case 'bottomTopBack':
                        options.rotation = {
                            'pin' : $(options.container).find('.timerAwesome-top'),
                            'beg' : (0 - 360 + 90/2),
                            'end' : 0,
                        };
                        options.rotateType = 'rotateX';
                        $(options.rotation.pin).css({
                            'transform-origin' : 'center bottom'
                        });
                        break;
                    case 'leftRight':
                        options.rotation = {
                            'pin' : $(options.container).find('.timerAwesome-bottom'),
                            'beg' : 0,
                            'end' : (0 - 360 + 90/2),
                        };
                        options.rotateType = 'rotateY';
                        $(options.rotation.pin).css({
                            'transform-origin' : 'left center'
                        });
                        break;
                    case 'leftRightBack':
                        options.rotation = {
                            'pin' : $(options.container).find('.timerAwesome-top'),
                            'beg' : (0 - 360 + 90/2),
                            'end' : 0,
                        };
                        options.rotateType = 'rotateY';
                        $(options.rotation.pin).css({
                            'transform-origin' : 'left center'
                        });
                        break;
                    case 'rightLeft':
                        options.rotation = {
                            'pin' : $(options.container).find('.timerAwesome-bottom'),
                            'beg' : 0,
                            'end' : (360 - 360/4 + 90/2),
                        };
                        options.rotateType = 'rotateY';
                        $(options.rotation.pin).css({
                            'transform-origin' : 'right center'
                        });
                        break;
                    case 'rightLeftBack':
                        options.rotation = {
                            'pin' : $(options.container).find('.timerAwesome-top'),
                            'beg' : (360 - 360/4 + 90/2),
                            'end' : 0,
                        };
                        options.rotateType = 'rotateY';
                        $(options.rotation.pin).css({
                            'transform-origin' : 'right center'
                        });
                        break;
                    default:
                        break;
                }
                break;
            default:
                break;
        }
        $(options.rotation.pin).css({
            'transition' : 'none',
            'transform' : options.rotateType + '(' + options.rotation.beg + 'deg)'
        });
    },



    'modeString': function(options) {
        var parentObj = this;
        if(options.cover.active) {
            options.dataIndex = -1;
            parentObj.setValue({
                'elem' : $(options.content.pres),
                'content' : options.cover.content
            });
            parentObj.setValue({
                'elem' : $(options.content.next),
                'content' : options.data[0]
            });
        } else {
            parentObj.setValue({
                'elem' : $(options.content.pres),
                'content' : options.data[0]
            });
            parentObj.setValue({
                'elem' : $(options.content.next),
                'content' : options.data[1]
            });
        }
        var content = {};
        setTimeout(function(){
            play(options);
            options.setInterval = setInterval(function(){
                play(options);
            }, options.period);
        }, options.pause);
        function play(options) {
            content.pres = options.data[options.dataIndex];
            content.next = options.data[options.dataIndex+1];
            parentObj.rotate({
                'pres' : content.pres,
                'next' : content.next
                },
                options
            );
            options.dataIndex++;
            if(!isExist(options.data[options.dataIndex+1])) {
                if(options.loop) {
                    options.dataIndex = -1;
                } else {
                    clearInterval(options.setInterval);
                    setTimeout(function(){
                        options.callback(options);
                    },50);
                }
            }
        };
    },



    'modeClock': function(options) {
        var parentObj = this;
        options.speed = options.speed > 1000 ? 1000 : options.speed;
        options['clock'] = {};
        function play(values, options) {
            parentObj.rotate({
                    'pres' : addZero(values.pres),
                    'next' : addZero(values.next)
                },
                options
            );
        };
        function clock(options) {
            if(options.cover.active) {
                parentObj.setValue({
                    'elem' : $(options.content.pres),
                    'content' : options.cover.content
                });
            } else {
                parentObj.setValue({
                    'elem' : $(options.content.pres),
                    'content' : addZero(options.clock.contentFirst),
                });
            }
            setTimeout(function(){
                if(options.cover.active) {
                    play({
                        'pres' : options.clock.contentRest,
                        'next' : options.clock.contentRest
                    }, options);
                }
                $(window).on(options.clock.event, function(e, value) {
                    play({
                        'pres' : value,
                        'next' : value
                    }, options);
                });
            },options.pause);
        };
        switch (options.mode) {
            case 'clock-seconds':
                options.clock['event'] = siteOptions.trigger.second;
                options.clock['contentFirst'] = siteOptions.getDate2('second', options.pause/1000 - 1).second;
                options.clock['contentRest'] = siteOptions.getDate2('second', 0).second;
                clock(options);
                break;
            case 'clock-minutes':
                options.clock['event'] = siteOptions.trigger.minute;
                options.clock['contentFirst'] = siteOptions.getDate2('minute', options.pause/1000 - 1).minute;
                options.clock['contentRest'] = siteOptions.getDate2('minute', 0).minute;
                clock(options);
                break;
            case 'clock-hours':
                options.clock['event'] = siteOptions.trigger.hour;
                options.clock['contentFirst'] = siteOptions.getDate2('hour', options.pause/1000 - 1).hour;
                options.clock['contentRest'] = siteOptions.getDate2('hour', 0).hour;
                clock(options);
                break;
            default:
                break;
        }
    },



    'modeTimer': function(options) {

        var parentObj = this;
        options.speed = options.speed > 1000 ? 1000 : options.speed;
        options.timer.src = siteOptions.dateDif([options.timer.target]);

        if(!parentObj.isTimerValid(options)) {
            parentObj.setValue({
                'elem' : $(options.content.pres),
                'content' : '00'
            });
            return false;
        }

        function play(values, options) {
            if(!parentObj.isTimerValid(options)) {
                options.play = false;
                setTimeout(function(){
                    options.callback(options);
                },50);
                return false;
            }
            parentObj.rotate({
                    'pres' : addZero(values.pres),
                    'next' : addZero(values.next)
                },
                options
            );
        };
        function timer(options) {
            if(options.cover.active) {
                parentObj.setValue({
                    'elem' : $(options.content.pres),
                    'content' : options.cover.content
                });
            } else {
                parentObj.setValue({
                    'elem' : $(options.content.pres),
                    'content' : addZero(options.timer.contentFirst),
                });
            }
            setTimeout(function(){
                if(options.cover.active) {
                    play({
                        'pres' : options.timer.contentRest,
                        'next' : options.timer.contentRest
                    }, options);
                }
                $(window).on(options.timer.event, function(e, value) {
                    if(options.play) {
                        options.timer.src = siteOptions.dateDif([options.timer.target]);
                        play({
                            'pres' : options.timer.src[options.timer.event],
                            'next' : options.timer.src[options.timer.event]
                        }, options);
                    }
                });
            },options.pause);
        };

        switch (options.mode) {
            case 'timer-seconds':
                options.timer['event'] = siteOptions.trigger.second;
                options.timer['contentFirst'] = options.timer.src.second;
                options.timer['contentRest'] = options.timer.src.second
                timer(options);
                break;
            case 'timer-minutes':
                options.timer['event'] = siteOptions.trigger.minute;
                options.timer['contentFirst'] = options.timer.src.minute;
                options.timer['contentRest'] = options.timer.src.minute;
                timer(options);
                break;
            case 'timer-hours':
                options.timer['event'] = siteOptions.trigger.hour;
                options.timer['contentFirst'] = options.timer.src.hour;
                options.timer['contentRest'] = options.timer.src.hour;
                timer(options);
                break;
            default:
                break;
        }


    },



    'rotate': function(content, options) {
        var parentObj = this;
        parentObj.setValue({
            'elem' : $(options.content.next),
            'content' : content.next
        });
        $(options.rotation.pin).css({
            'transition' : 'transform ' + options.speed/1000 + 's linear 0s',
            'transform' : options.rotateType + '(' + options.rotation.end + 'deg)'
        });
        setTimeout(function(){
            parentObj.setValue({
                'elem' : $(options.content.pres),
                'content' : content.next
            });
            $(options.rotation.pin).css({
                'transition' : 'none',
                'transform' : options.rotateType + '(' + options.rotation.beg + 'deg)'
            });
        }, options.speed - options.speed*5/100); //Когда шторка опрокинулась в невидимую зону
    },



    'getValue': function(elem) {
        return $(elem).find('.timerAwesome-value').html();
    },



    'setValue': function(options) {
        $(options.elem).find('.timerAwesome-value').html(options.content);
    },



    'getPres': function(container) {
        return $(container).find('.timerAwesome-content-pres.timerAwesome-content-active');
    },



    'getNext': function(container) {
        return $(container).find('.timerAwesome-content-next.timerAwesome-content-active');
    },



    'isTimerValid': function(options) {
        return options.timer.src.ms > 0 ? false : true;
    },



};