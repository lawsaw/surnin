var slickCustom = {


    'default': {
        'container'     : '.slickCustom',
        'child'         : '.slickCustom-item',
        'slides'        : []
    },



    'slick': function(options) {
        if(!this.isSlicked(options.custom.container)) {
            var countCurrent = this.getCols(options.custom.slides), // Должно отображаться
                countHaveToBe = this.getSeries(options.custom.slides),
                countAll = this.getLength(options);
            if(countCurrent < countAll) {
                $(options.custom.container).on('init', function () {

                }).slick(options);
                //console.log(options.custom.container + ': ' + countCurrent + ' < ' + countAll + ' so slicked, but now it have to be ' + countHaveToBe);
            }
        }
    },



    'init': function(options) {
        var parentObj = this;
        options['custom'] = siteOptions.setOptions({
            defaults: this.default,
            source: isExist(options.custom) ? options.custom: {}
        });
        /*for(var i in options.custom) {
            options[i] = options.custom[i];
        }*/
        options['responsive'] = this.getResponsive(options.custom.slides);

        // delete options['custom'];

        $(options.custom.container).on('breakpoint', function(event, slick, breakpoint) {
            if(parentObj.isSlicked(options.custom.container)) {
                var countCurrent = slick.options.slidesToShow,
                    countHaveToBe = parentObj.getSeries(options.custom.slides),
                    countAll = slick.slideCount;
                if(countCurrent >= countAll) {
                    $(this).slick('unslick');
                    //console.log(options.custom.container + ': ' + countCurrent + ' >= ' + countAll + ' so unslicked, but now it have to be ' + countHaveToBe);
                }
                //console.log(slick);
            }

        });

        parentObj.slick(options);

        $(window).on('adaptive', function() {
            parentObj.slick(options);
        });

    },



    'isSlicked': function(container) {
        return ($(container).find('.slick-slide').length > 0 || $(container).hasClass('slick-slider')) ? true : false;
    },



    'getCols': function(slidesToShowArray) {
        var viewportBreakpoints = objValuesToArray(siteOptions.responsive),
            series = this.getSeries(slidesToShowArray);
        for(var i=0; i<series.length; i++) {
            if((viewportBreakpoints[i+1] && isWindowWidth(viewportBreakpoints[i], viewportBreakpoints[i+1]))) {
                return series[i];
            } else if (isWindowWidth(viewportBreakpoints[viewportBreakpoints.length-1], null)) {
                return series[series.length-1];
            }
        }
    },



    'getLength': function(options) {
        return $(options.custom.container).find(options.custom.child).length;
    },



    'getSeries': function(slidesToShowArray) {
        return isExist(slidesToShowArray) ? siteOptions.getSizes(slidesToShowArray) : siteOptions.getSizes([]);
    },



    'getResponsive': function(slidesToShowArray) {
        var series = this.getSeries(slidesToShowArray),
            sizes = objValuesToArray(siteOptions.responsive),
            responsive = [];
        for(var i in sizes) {
            if(i > 0) {
                responsive.push({
                    breakpoint: sizes[i],
                    settings: {
                        slidesToShow: series[i-1]
                    }
                })
            }
        }
        responsive.push({
            breakpoint: 10000,
            settings: {
                slidesToShow: series[series.length-1]
            }
        });
        return responsive;
    },

};
