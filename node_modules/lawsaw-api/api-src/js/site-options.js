var siteOptions = {
    'responsive' : {
        'sizeXS'        : 0,
        'sizeS'         : 480,
        'sizeM'         : 768,
        'sizeL'         : 992,
        'sizeXL'        : 1200,
    },
    'scrollBarWidth'    : 15,
    'globalInterval'    : 1000,
    'svgPath'           : 'images/sprite.svg',
    'css'               : {
        'visibilityHidden'  : 'css-visibility-hidden',
    },
    'scrolled': function(){ return $(document).scrollTop(); },
    'scrolledStatic': 0,
    'scrolledDoc': 0,
    'lastScrollTop': 0,
    'scrollDirection': 'down',

    'timer': null,

    'content': {
        'navbar': {
            'container': '.navbar',
            'ruleToTop': true,
            'ruleToBottom': false,
        }
    },


    'getLang': function(){
        return $('html').attr('lang');
    },


    'listenScrollDirection': function(){
        var parentObj = this,
            newScrollTop = 0;
        $(window).on(parentObj.trigger.defaultScroll, function() {
            newScrollTop = parentObj.scrolled();
            if(newScrollTop < parentObj.lastScrollTop) {
                //console.log('up 1');
                parentObj.scrollDirection = 'up';
            }
            else {
                //console.log('down 1');
                parentObj.scrollDirection = 'down';
            }
            parentObj.lastScrollTop = newScrollTop;
            $(window).trigger(parentObj.trigger.customScroll, {
                'new': newScrollTop,
                'last': parentObj.lastScrollTop,
                'direction': parentObj.scrollDirection
            });
        });
    },



    'listenPos': function(elem){
        var elem = $(document).find(elem),
            posTop = 0,
            posBottom = 0,
            parentObj = this;
        $(window).on(siteOptions.trigger.defaultScroll, function() {
            posTop = $(elem).offset().top;
            posBottom = posTop + $(elem).height();
            // console.log('scroll: ' + parentObj.scrolled());
            // console.log('top: ' + posTop);
            // console.log('bot: ' + posBottom);
        });
    },


    'getMedia': function(){
        var media = $(document).find('#current-media');
        var value = parseInt(media.css('max-width'));
        return value;
    },

    'setDinamicEvent': function(options) {
        var duration = 5, // На сколько плавным сделать изменение. 1 - это самый резкий вариант. 5 - уже норм
            interval = setInterval(function(){
            options.elem.trigger(options.event);
            //console.log('Event is firing: ' + options.event + ' elem: ' + $(options.elem) + 'time: ' + options.time);
        },options.time / duration);
        setTimeout(function(){
            clearInterval(interval);
        },options.time);
    },

    'filterSizes' : function(array) {//from [2] make [2,2,2,2,2]
        if(array.length == 1) {
            var newArray = [],
                value = array[0];
            for(var item in this.responsive) {
                newArray.push(value);
            }
            return newArray;
        } else {
            return array;
        }
    },

    'buildResponsiveObj': function(array){
        //[1,2,3,4,5,6,7,8,9,10];
        var obj = {},
            counter = 0;
        for(var i in siteOptions.responsive) {
            obj[i] = array[counter];
            counter++;
        }
        return obj;
    },

    'getSizes': function(numArray) {
        var sizeCounter = 1,
            newNumArray = [],
            sizes = [];
        newNumArray = this.filterSizes(numArray);
        newNumArray = this.buildResponsiveObj(newNumArray);
        //Создаем массив чисел размеров в правильном порядке, ибо в объекте всё сикось накось
        for(var sizeItem in newNumArray) {
            var item = !newNumArray[sizeItem] ? sizeCounter : newNumArray[sizeItem];
            sizes.push(item);
            sizeCounter++;
        }
        return sizes;
    },

    'setOptions': function(options){
        /*
            options.defaults
            options.source
        */
        var result = {};
        for(var item in options.defaults) {
            result[item] = isExist(options.source[item]) ? options.source[item] : isFunction(options.defaults[item]) ? options.defaults[item] : options.defaults[item];
        }
        return result;
    },
    'setTransition': function(elem) {
        var css = elem.css('transition'),
            cssArray = css.split(','),
            cssArrayLine = [];
        for(var i=0; i<cssArray.length; i++) {
            cssArrayLine.push(cssArray[i].split(' '));
        }
        return cssArrayLine;
    },


    'getDate': function(options) {
        var date = new Date();
        if(!isExist(options)) {
            return {
                'second' : date.getSeconds(),
                'minute' : date.getMinutes(),
                'hour' : date.getHours(),
                'day' : date.getDate(),
                'month' : date.getMonth(),
                'year' : date.getFullYear(),
                'ms': Date.parse(date),
            }
        }
        options.delta = options.delta ? options.delta : 0;
        switch (options.type) {
            case 'second':
                return date.getSeconds(date.setSeconds(date.getSeconds() + options.delta));
                break;
            case 'minute':
                return date.getMinutes(date.setMinutes(date.getMinutes() + options.delta));
                break;
            case 'hour':
                return date.getHours(date.setHours(date.getHours() + options.delta));
                break;
            default:
                break;
        }
    },


    'getDate2': function(options) {

        var defaults = {
            'second'    : 0,
            'minute'    : 0,
            'hour'      : 0,
            'day'       : 0,
            'month'     : 0,
            'year'      : 0,
            'ms'        : 0,
        },
            date = new Date();

        options = siteOptions.setOptions({
            defaults: defaults,
            source: isExist(options) ? options : {}
        });

        var result =  {
            'second'    : date.getSeconds(date.setSeconds(date.getSeconds() + options.second)),
            'minute'    : date.getMinutes(date.setMinutes(date.getMinutes() + options.minute)),
            'hour'      : date.getHours(date.setHours(date.getHours() + options.hour)),
            'day'       : date.getDate(date.setDate(date.getDate() + options.day)),
            'month'     : date.getMonth(date.setMonth(date.getMonth() + options.month)),
            'year'      : date.getFullYear(date.setFullYear(date.getFullYear() + options.year)),
            'ms'        : Date.parse(date),
        };

        return result;
    },


    'clock': function() {
        var parentObj = this,
            date = {
                'pres' : {},
                'next' : {},
            };
        clearInterval(parentObj.timer);
        parentObj.timer = setInterval(function() {
            date.pres = parentObj.getDate2();
            setTimeout(function(){
                $(window).trigger(parentObj.trigger.second, date.pres.second);
                date.next = parentObj.getDate2();
                //console.log('second: ' + date.pres.second);
                if(date.pres.second == 0) {
                    //console.log('minute: ' + date.pres.minute);
                    $(window).trigger(parentObj.trigger.minute, date.pres.minute);
                }
                if(date.pres.second == 0 && date.pres.minute == 0) {
                    //console.log('hour: ' + date.pres.hour);
                    $(window).trigger(parentObj.trigger.hour, date.pres.hour);
                }
            },500);
        },1000);
    },



    'dateStringToObj': function(string) { //string = '25-05-2017 15:30:15'
        var options = {};

        options['date'] = new Date();
        options['array'] = string.split(' ');

        options['day'] = parseInt(options['array'][0].split('-')[0]);
        options['month'] = parseInt(options['array'][0].split('-')[1])-1;
        options['year'] = parseInt(options['array'][0].split('-')[2]);

        options['hour'] = parseInt(options['array'][1].split(':')[0]);
        options['minute'] = parseInt(options['array'][1].split(':')[1]);
        options['second'] = parseInt(options['array'][1].split(':')[2]);

        options['date'].setDate(options['day']);
        options['date'].setMonth(options['month']);
        options['date'].setFullYear(options['year']);

        options['date'].setSeconds(options['second']);
        options['date'].setMinutes(options['minute']);
        options['date'].setHours(options['hour']);

        options['ms'] = Date.parse(options['date']);

        return options;
    },


    'dateDif': function(dates) {
        if(!isExist(dates)) { return false }
        if(dates.length > 2) { return false; }

        var date = {};
        var result = {};

        if(dates.length == 1) {
            date['date1'] = new Date(this.dateStringToObj(dates[0]).ms);
            date['date2'] = new Date(this.getDate2().ms);
        } if(dates.length == 2) {
            date['date1'] = new Date(this.dateStringToObj(dates[0]).ms);
            date['date2'] = new Date(this.dateStringToObj(dates[1]).ms);
        }
        var diff = date['date2'] - date['date1'];

        var mil = Math.abs(diff);

        var seconds = (mil / 1000) | 0;
        mil -= seconds * 1000;

        var minutes = (seconds / 60) | 0;
        seconds -= minutes * 60;

        var hours = (minutes / 60) | 0;
        minutes -= hours * 60;

        var days = (hours / 24) | 0;
        //hours -= days * 24;

        var weeks = (days / 7) | 0;
        days -= weeks * 7;

        var monthes = (weeks / 4) | 0;
        weeks -= monthes * 4;

        var years = (monthes / 12) | 0;
        monthes -= years * 12;

        result = {
            'ms' : diff,
            'second' : seconds,
            'minute' : minutes,
            'hour' : hours,
            'day' : days,
            'month' : monthes,
            'weeks' : weeks,
            'year' : years,
        };

        return result;

    },


    'isOverlap': function(options) {
        function getPos(elem) {
            return {
                'top': $(elem).offset().top,
                'left': $(elem).offset().left,
                'right': $(elem).offset().left + $(elem).width(),
                'bottom': $(elem).offset().top + $(elem).height(),
            }
        };
        var elem1 = getPos(options.elem1),
            elem2 = getPos(options.elem2);
        return  (elem1.right > elem2.left && elem1.left < elem2.right && elem1.top < elem2.bottom && elem1.bottom > elem2.top) ? true :
            (elem2.right > elem1.left && elem2.left < elem1.right && elem2.top < elem1.bottom && elem2.bottom > elem1.top) ? true :
                false;
    },

    'hexToRgba': function(hex, alpha) {
        var r = parseInt(hex.slice(1, 3), 16),
            g = parseInt(hex.slice(3, 5), 16),
            b = parseInt(hex.slice(5, 7), 16);
        if (alpha) {
            return "rgba(" + r + ", " + g + ", " + b + ", " + alpha + ")";
        } else {
            return "rgb(" + r + ", " + g + ", " + b + ")";
        }
    },

    'rgbToRgba': function(rgb, alpha) {
        var color = rgb.replace(/rgb/i, "rgba");
        color = color.replace(/\)/i,',' + alpha +')');
        return color;
    },

    'replaceAll': function(str, find, replace) {
        var $r="";
        while($r!=str){
            $r = str;
            str = str.replace(find, replace);
        }
        return str;
    },


    'preventDefault': function(e) {
        e = e || window.event;
        if (e.preventDefault)
            e.preventDefault();
        e.returnValue = false;
    },

    'preventDefaultForScrollKeys': function(e) {
        // left: 37, up: 38, right: 39, down: 40,
        // spacebar: 32, pageup: 33, pagedown: 34, end: 35, home: 36
        var keys = {37: 1, 38: 1, 39: 1, 40: 1};
        if (keys[e.keyCode]) {
            this.preventDefault(e);
            return false;
        }
    },

    'isInLayout': function(container) {
        return $(document).find(container).length ? true : false;
    },

    'disableScroll': function(e) {
        var parentObj = this;
        if (window.addEventListener) // older FF
            window.addEventListener('DOMMouseScroll', parentObj.preventDefault, false);
        window.onwheel = parentObj.preventDefault; // modern standard
        window.onmousewheel = document.onmousewheel = parentObj.preventDefault; // older browsers, IE
        window.ontouchmove  = parentObj.preventDefault; // mobile
        document.onkeydown  = parentObj.preventDefaultForScrollKeys;
    },

    'loadScript': function(url, completeCallback) {
        var script = document.createElement('script'), done = false,
            head = document.getElementsByTagName("head")[0];
        script.src = url;
        script.onload = script.onreadystatechange = function(){
            if ( !done && (!this.readyState ||
                this.readyState == "loaded" || this.readyState == "complete") ) {
                done = true;
                completeCallback();

                // IE memory leak
                script.onload = script.onreadystatechange = null;
                head.removeChild( script );
            }
        };
        head.appendChild(script);
        // loadScript("https://path-to-js.js",
        //     function(){
        //         alert('file has been loaded.');
        //     }
        // );
    },

    'enableScroll': function(e) {
        var parentObj = this;
        if (window.removeEventListener)
            window.removeEventListener('DOMMouseScroll', parentObj.preventDefault, false);
        window.onmousewheel = document.onmousewheel = null;
        window.onwheel = null;
        window.ontouchmove = null;
        document.onkeydown = null;
    },

    'userInfo': function() {
        var detect = detect.parse(navigator.userAgent);
        return {
            'browser'   : detect.browser.family,
            'browserVer': detect.browser.version,
            'device'    : detect.device.family,
            'deviceVer' : detect.device.version,
            'os'        : detect.os.family,
            'osVer'     : detect.os.version,
        }
    },


    'trigger': {
        'defaultScroll' : 'scroll',
        'defaultResize' : 'resize',
        'adaptive'      : 'adaptive',
        'scrollUp'      : 'scrollUp',
        'scrollDown'    : 'scrollDown',
        'customScroll'  : 'customScroll',
        'modalAwesome'  : 'modalAwesome',
        'modalAwesomeOpen'  : 'modalAwesomeOpen',
        'modalAwesomeClose'  : 'modalAwesomeClose',
        'modalAwesomeButtonOpenClick'  : 'modalAwesomeButtonOpenClick',
        'modalAwesomeButtonCloseClick'  : 'modalAwesomeButtonCloseClick',
        'modalAwesomeButtonOpenClickAjax'  : 'modalAwesomeButtonOpenClickAjax',
        'modalAwesomeButtonCloseClickAjax'  : 'modalAwesomeButtonCloseClickAjax',
        'modalAwesomeOpenAjax'  : 'modalAwesomeOpenAjax',
        'modalAwesomeCloseAjax'  : 'modalAwesomeCloseAjaxs',
        'gridAwesome'   : 'gridAwesome',
        'timerAwesome'  : 'timerAwesome',
        'second'        : 'second',
        'minute'        : 'minute',
        'hour'          : 'hour',
    },
    'wrap'           : {
        'html'       :   function(){ return $(document).find('html') },
        'main'       :   function(){ return $(document).find('.wrap') },
        'page'       :   function(){ return $(document).find('.wrapPage') },
        'modal'      :   function(){ return $(document).find('.wrapModalAwesome') },
        'tooltip'    :   function(){ return $(document).find('.wrapTooltipAwesome') },
    },


    'isMobile': function() {
        return detect.parse(navigator.userAgent).device.type == 'Mobile' ? true : false;
    },


};